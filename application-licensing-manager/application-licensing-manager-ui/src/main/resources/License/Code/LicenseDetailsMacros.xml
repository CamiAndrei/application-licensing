<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="License.Code.LicenseDetailsMacros" locale="">
  <web>License.Code</web>
  <name>LicenseDetailsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1479391740000</creationDate>
  <parent>License.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1498815804000</date>
  <contentUpdateDate>1498815804000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
  ## We use the author of the page that uses this macro as the current author to execute the code since
  ## the Licensing code is protected and only viewable to administrators for privacy reasons.
  #set ($originalCurrentUserReference = $xcontext.context.userReference)
  #set ($discard = $xcontext.context.setUserReference($doc.author))
{{/velocity}}
{{velocity}}
#macro (findNextUniqueDetailsPageReference $nextPageReference)
  ## Use a license id as the name of the page
  #set ($licenseId = $services.licensing.license.createLicense().id.id)
  #set ($nextPageReference = $NULL)
  #setVariable ("$nextPageReference", $services.model.createDocumentReference('', ['License', 'Data'], $licenseId))
#end
#macro (computeExpirationDate $expirationDate $type $instanceId $featureId $computedExpirationDate)
  ## Compute the expiration date but only if it's not defined. If defined then use the defined value
  #if ("$!expirationDate" == '')
    ## For Trial licenses, have an expiration date of now + 10 days
    ## For Paid licenses, have an expiration date of now + 1 year
    ## For Free licenses, have an expiration date of now + 1 year
    #set ($dateTime = $xwiki.jodatime.getMutableDateTime())
    #if ($type.equalsIgnoreCase('paid'))
      #set ($discard = $dateTime.addDays(365))
    #elseif ($type.equalsIgnoreCase('free'))
      #set ($discard = $dateTime.addDays(365))
    #else
      ## We needed a way to handle the Extend Trial action so the user won't loose it
      ## E.g.: If an user gets a trial and tries to extend it before the expiration date, the 11 days will be added
      ## to the previous expiration date and not to the current date.
      #countTrials($instanceId $featureId $trialCount)
      #if ($trialCount &gt;= 1)
        #getExpirationDate($instanceId $featureId $date)
        ## If the last expiration date is not defined it means there's no expiration date set yet (i.e. this is a new entry)
        ## Use the current date as the expiration date in this case.
        #if ("$!date" != '')
          #set ($dateTime = $xwiki.jodatime.getMutableDateTime($date.time))
        #end
      #end
      #set ($discard = $dateTime.addDays(11))
    #end
  #else
    #set ($dateTime = $xwiki.jodatime.getMutableDateTime($expirationDate.time))  
  #end
  #set ($computedExpirationDate = $NULL)
  #setVariable ("$computedExpirationDate", $dateTime)
#end
#macro (generateLicense $firstName $lastName $email $instanceId $featureId $dependentFeatureIds $type $issueDate $expirationDate $shouldSaveLicense $licenseDetailsReference $licenseAsString)
  ## Compute the expiration date but only if it's not defined. If defined then use the defined value
  #computeExpirationDate($expirationDate $type $instanceId $featureId $computedExpirationDate)
  ## Create License object
  #set ($license = $services.licensing.license.createLicense())
  #set ($discard = $license.setId($licenseDetailsReference.name))
  #set ($discard = $license.setType($type))
  #set ($discard = $license.addInstanceId($instanceId))
  #set ($discard = $license.setExpirationDate($computedExpirationDate.getMillis()))
  #set ($discard = $license.addLicenseeInfo('firstName', $firstName))
  #set ($discard = $license.addLicenseeInfo('lastName', $lastName))
  #set ($discard = $license.addLicenseeInfo('email', $email))
  #set ($discard = $license.addFeatureId($featureId))
  #foreach ($dependentFeatureId in $stringtool.split($dependentFeatureIds, ', '))
    #set ($discard = $license.addFeatureId($dependentFeatureId))
  #end
  ## Keys are stored in the permanent directory, in a subdirectory named 'license-keystore'
  #set ($keyStore = $services.crypto.store.getX509FileKeyStore('license-keystore'))
  ## Certificates are stored in wiki pages in a space named 'License.Certificates'
  #set ($certificateStore = $services.crypto.store.getX509SpaceCertificateStore($services.model.resolveSpace('License.Certificates')))
  #if ($type.equalsIgnoreCase('paid'))
    #set ($dn = "CN=Paid License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #elseif ($type.equalsIgnoreCase('free'))
    #set ($dn = "CN=Free License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #else
    #set ($dn = "CN=Trial License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #end
  ## Find the password to use from the config
  #set ($configDoc = $xwiki.getDocument('License.Code.LicenseConfig'))
  #set ($password = $configDoc.getValue("${stringtool.lowerCase($type)}Password"))
  #set ($signedLicense = $services.licensing.manager.generate($license, $keyStore, $certificateStore, $dn, $password))
  #if ("$!signedLicense" != '' &amp;&amp; $shouldSaveLicense)
    ## Persist the license
    #set ($licenseStore = $services.licensing.license.getFileLicenseStore('generated-licenses'))
    #set ($discard = $services.licensing.manager.storeGeneratedLicense($licenseStore, $signedLicense))
    ## Update the license details with the License ID and the fact that a license now exists
    #if ("$!licenseDetailsReference" != '')
      #set ($detailsDocument = $xwiki.getDocument($licenseDetailsReference))
      #set ($detailsObject = $detailsDocument.getObject('License.Code.LicenseDetailsClass'))
      #if ("$!detailsObject" != '')
        #set ($discard = $detailsObject.set('hasLicense', '1'))
        #set ($discard = $detailsObject.set('licenseId', $signedLicense.id.id))
        ## If the issue date is not set, compute it
        #if ("$!issueDate" == '')
          #set ($discard = $detailsObject.set('issueDate', $datetool.get('dd/MM/yyyy')))
        #end
        #set ($dtf = $xwiki.jodatime.getDateTimeFormatterForPattern('dd/MM/yyyy'))
        #set ($discard = $detailsObject.set('expirationDate', $dtf.print($computedExpirationDate)))
        #set ($discard = $detailsDocument.save('License ID added', true))
        #set ($licenseAsString = $NULL)
        #setVariable ("$licenseAsString", $services.licensing.license.encode($signedLicense))
      #end
    #end
  #end
#end
#macro (addLicenseDetails $firstName $lastName $email $instanceId $extensionName $featureId $dependentFeatureIds $type $shouldGenerateLicense $licenseAsString)
  #findNextUniqueDetailsPageReference($nextPageReference)
  #set ($nextDocument = $xwiki.getDocument($nextPageReference))
  ## Extra check to make sure we never overwrite an existing page
  #if ($nextDocument.isNew())
    ## Add a LicenseDetails xobject and fill it
    #set ($nextObject = $nextDocument.newObject('License.Code.LicenseDetailsClass'))
    #set ($discard = $nextObject.set('licenseId', $nextPageReference.name))
    #set ($discard = $nextObject.set('firstName', $!firstName))
    #set ($discard = $nextObject.set('lastName', $!lastName))
    #set ($discard = $nextObject.set('email', $!email))
    #set ($discard = $nextObject.set('instanceId', $!instanceId))
    #set ($discard = $nextObject.set('extensionName', $!extensionName))
    #set ($discard = $nextObject.set('featureId', $!featureId))
    #set ($discard = $nextObject.set('dependentFeatureIds', $!dependentFeatureIds))
    #set ($discard = $nextObject.set('type', $!type))
    #set ($discard = $nextObject.set('hasLicense', '0'))
    #set ($discard = $nextObject.set('requestDate', $datetool.get('dd/MM/yyyy')))
    #set ($discard = $nextDocument.save('License details added', true))
    #if ($shouldGenerateLicense)
      #generateLicense($firstName $lastName $email $instanceId $featureId $dependentFeatureIds $type $NULL $NULL true $nextPageReference $generatedLicense)
      #set ($licenseAsString = $NULL)
      #setVariable ("$licenseAsString", $generatedLicense)
    #end
  #else
    {{error}}Internal error: Document [$nextDocument.documentReference] already exists! Contact your system administrator.{{/error}}
  #end
#end
#macro (getExpiringLicensesForType $daysBeforeExpiration $type $expiringLicenses)
  #set ($results = [])
  #foreach ($days in $daysBeforeExpiration)
    #set ($query = $services.query.xwql("select license.firstName, license.lastName, license.email, license.extensionName, license.expirationDate, license.type from Document doc, doc.object(License.Code.LicenseDetailsClass) license where license.type = :type and license.expirationDate &gt;= :dateBegin and license.expirationDate &lt; :dateEnd"))
    #set ($query = $query.bindValue('type', $type))
    ## Compute current date + days
    #set ($dateTime = $xwiki.jodatime.getDateTime())
    #set ($dateBegin = $dateTime.plusDays($days).withTimeAtStartOfDay())
    #set ($dateEnd = $dateTime.plusDays($days).plusDays(1).withTimeAtStartOfDay())
    #set ($query = $query.bindValue('dateBegin', $dateBegin.toDate()))
    #set ($query = $query.bindValue('dateEnd', $dateEnd.toDate()))
    #foreach ($result in $query.execute())
      #set ($map = {})
      #set ($discard = $map.put('firstName', $result[0]))
      #set ($discard = $map.put('lastName', $result[1]))
      #set ($discard = $map.put('email', $result[2]))
      #set ($discard = $map.put('extensionName', $result[3]))
      #set ($discard = $map.put('expirationDate', $result[4]))
      #set ($discard = $map.put('type', $result[5]))
      #set ($discard = $results.add($map))
    #end
  #end
  #set ($expiringLicenses = $NULL)
  #setVariable ("$expiringLicenses", $results)
#end
#macro (getExpiringLicenses $daysBeforeExpirationTrial $daysBeforeExpirationPaid $expiringLicenses)
  #set ($totalResults = [])
  #getExpiringLicensesForType($daysBeforeExpirationTrial, 'trial', $trialResults)
  #set ($discard = $totalResults.addAll($trialResults))
  #getExpiringLicensesForType($daysBeforeExpirationPaid, 'paid', $paidResults)
  #set ($discard = $totalResults.addAll($paidResults))
  #set ($expiringLicenses = $NULL)
  #setVariable ("$expiringLicenses", $totalResults)
#end
#macro (countTrials $instanceId $featureId $trialCount)
  #getLicenseQuery($instanceId $featureId $query)
  #set ($trialCount = $NULL)
  #setVariable ("$trialCount", $query.count())
#end
#macro (getExpirationDate $instanceId $featureId $date)
  #getLicenseQuery($instanceId $featureId $query)
  #set ($result = $query.setLimit(1).execute())
  #set ($resultDoc = $xwiki.getDocument($result[0]))
  #set ($date = $NULL)
  #setVariable ("$date", $resultDoc.getValue('expirationDate'))
#end
#macro (getLicenseQuery $instanceId $featureId $query)
  #set ($computedQuery = $services.query.xwql("from doc.object(License.Code.LicenseDetailsClass) license where license.instanceId = :instanceId and license.featureId = :featureId order by license.expirationDate desc"))
  #set ($computedQuery = $computedQuery.bindValue('instanceId', $instanceId))
  #set ($computedQuery = $computedQuery.bindValue('featureId', $featureId))
  #set ($query = $NULL)
  #setVariable ("$query", $computedQuery)
#end
#set ($discard = $xcontext.context.setUserReference($originalCurrentUserReference))
{{/velocity}}</content>
</xwikidoc>
